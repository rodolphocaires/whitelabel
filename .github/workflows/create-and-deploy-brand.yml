name: Create and Deploy New Brand

on:
  workflow_dispatch:
    inputs:
      brand_id:
        description: 'Brand ID (unique identifier, lowercase, no spaces)'
        required: true
        type: string
      brand_config_url:
        description: 'URL to brand configuration JSON file'
        required: true
        type: string
      platform:
        description: 'Platform to deploy'
        required: true
        default: 'android'
        type: choice
        options:
          - android
      build_mode:
        description: 'Build mode'
        required: true
        default: 'release'
        type: choice
        options:
          - debug
          - release

jobs:
  create-brand:
    runs-on: ubuntu-latest
    outputs:
      brand_id: ${{ github.event.inputs.brand_id }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Parse and validate brand configuration
      id: parse_config
      run: |
        BRAND_ID="${{ github.event.inputs.brand_id }}"
        
        # Validate brand ID
        if [[ ! "$BRAND_ID" =~ ^[a-z0-9_]+$ ]]; then
          echo "❌ Brand ID must be lowercase letters, numbers, and underscores only"
          exit 1
        fi
        if [ -d "assets/brands/$BRAND_ID" ]; then
          echo "❌ Brand ID '$BRAND_ID' already exists"
          exit 1
        fi
        echo "✅ Brand ID '$BRAND_ID' is valid"
        
        # Fetch brand configuration from URL
        CONFIG_URL="${{ github.event.inputs.brand_config_url }}"
        echo "Fetching brand configuration from URL: $CONFIG_URL"
        
        # Validate URL format
        if [[ ! "$CONFIG_URL" =~ ^https?:// ]]; then
          echo "❌ Invalid URL format. Must start with http:// or https://"
          exit 1
        fi
        
        # Fetch and validate JSON format
        CONFIG=$(curl -s -f "$CONFIG_URL")
        if [ $? -ne 0 ] || [ -z "$CONFIG" ]; then
          echo "❌ Failed to fetch configuration from URL: $CONFIG_URL"
          exit 1
        fi
        
        if ! echo "$CONFIG" | jq . > /dev/null 2>&1; then
          echo "❌ Invalid JSON format in brand configuration from URL"
          exit 1
        fi
        
        # Extract and validate required fields
        BRAND_NAME=$(echo "$CONFIG" | jq -r '.brandName // empty')
        APP_TITLE=$(echo "$CONFIG" | jq -r '.appTitle // empty')
        PRIMARY_COLOR=$(echo "$CONFIG" | jq -r '.primaryColorHex // empty')
        SPLASH_URL=$(echo "$CONFIG" | jq -r '.splashScreenUrl // empty')
        
        if [ -z "$BRAND_NAME" ] || [ -z "$APP_TITLE" ] || [ -z "$PRIMARY_COLOR" ] || [ -z "$SPLASH_URL" ]; then
          echo "❌ Missing required fields in configuration"
          echo "Required: brandName, appTitle, primaryColorHex, splashScreenUrl"
          exit 1
        fi
        
        # Validate color formats
        COLORS=(
          "$(echo "$CONFIG" | jq -r '.primaryColorHex // "#000000"')"
          "$(echo "$CONFIG" | jq -r '.secondaryColorHex // "#000000"')"
          "$(echo "$CONFIG" | jq -r '.accentColorHex // "#000000"')"
          "$(echo "$CONFIG" | jq -r '.backgroundColorHex // "#FFFFFF"')"
          "$(echo "$CONFIG" | jq -r '.textColorHex // "#000000"')"
        )
        
        for color in "${COLORS[@]}"; do
          if [[ ! "$color" =~ ^#[0-9A-Fa-f]{6}$ ]]; then
            echo "❌ Invalid color format: $color (must be #RRGGBB)"
            exit 1
          fi
        done
        
        echo "✅ Brand configuration is valid"
        
        # Export parsed values for later steps
        echo "BRAND_NAME=$BRAND_NAME" >> $GITHUB_OUTPUT
        echo "APP_TITLE=$APP_TITLE" >> $GITHUB_OUTPUT
        echo "PRIMARY_COLOR=$PRIMARY_COLOR" >> $GITHUB_OUTPUT
        echo "SPLASH_URL=$SPLASH_URL" >> $GITHUB_OUTPUT

    - name: Create temporary brand directory structure
      run: |
        BRAND_ID="${{ github.event.inputs.brand_id }}"
        mkdir -p "assets/brands/$BRAND_ID"
        
        # Create placeholder assets
        touch "assets/brands/$BRAND_ID/logo.png"
        touch "assets/brands/$BRAND_ID/splash_bg.png"
        
        echo "✅ Created temporary brand directory structure for $BRAND_ID"

    - name: Generate temporary brand configuration
      run: |
        BRAND_ID="${{ github.event.inputs.brand_id }}"
        OUTPUT_CONFIG_FILE="assets/brands/$BRAND_ID/config.json"
        
        # Fetch the JSON configuration from URL
        CONFIG_URL="${{ github.event.inputs.brand_config_url }}"
        CONFIG=$(curl -s -f "$CONFIG_URL")
        
        # Update asset paths to include the brand ID
        UPDATED_CONFIG=$(echo "$CONFIG" | jq --arg brand_id "$BRAND_ID" '
          .assets.logo = "assets/brands/\($brand_id)/" + (.assets.logo | split("/") | last) |
          .assets.splash_background = "assets/brands/\($brand_id)/splash_bg.png" |
          .assets.app_icon = "assets/brands/\($brand_id)/logo.png"
        ')
        
        # Write the configuration to file
        echo "$UPDATED_CONFIG" | jq '.' > "$OUTPUT_CONFIG_FILE"
        
        echo "✅ Generated temporary brand configuration:"
        cat "$OUTPUT_CONFIG_FILE" | jq '.'

    - name: Update pubspec.yaml temporarily
      run: |
        BRAND_ID="${{ github.event.inputs.brand_id }}"
        
        # Create a backup of original pubspec.yaml
        cp pubspec.yaml pubspec.yaml.backup
        
        # Check if brand assets path already exists in pubspec.yaml
        if ! grep -q "assets/brands/$BRAND_ID/" pubspec.yaml; then
          # Add new brand assets path
          sed -i "/- assets\/brands\/active\//a\\    - assets/brands/$BRAND_ID/" pubspec.yaml
          echo "✅ Temporarily added $BRAND_ID assets to pubspec.yaml"
        else
          echo "ℹ️ Brand assets already in pubspec.yaml"
        fi

    - name: Display brand summary
      run: |
        echo "🎉 Brand Creation Summary"
        echo "========================"
        echo "Brand ID: ${{ github.event.inputs.brand_id }}"
        echo "Brand Name: ${{ steps.parse_config.outputs.BRAND_NAME }}"
        echo "App Title: ${{ steps.parse_config.outputs.APP_TITLE }}"
        echo "Primary Color: ${{ steps.parse_config.outputs.PRIMARY_COLOR }}"
        echo "Splash Screen URL: ${{ steps.parse_config.outputs.SPLASH_URL }}"
        echo "Platform: ${{ github.event.inputs.platform }}"
        echo "Build Mode: ${{ github.event.inputs.build_mode }}"

  deploy-android:
    needs: create-brand
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Recreate temporary brand files
      run: |
        BRAND_ID="${{ needs.create-brand.outputs.brand_id }}"
        mkdir -p "assets/brands/$BRAND_ID"
        
        # Recreate brand configuration
        CONFIG_URL="${{ github.event.inputs.brand_config_url }}"
        CONFIG=$(curl -s -f "$CONFIG_URL")
        
        # Download actual assets from configuration
        LOGO_URL=$(echo "$CONFIG" | jq -r '.assets.logo // empty')
        SPLASH_URL=$(echo "$CONFIG" | jq -r '.splashScreenUrl // empty')
        
        # Download logo if URL is provided
        if [ ! -z "$LOGO_URL" ] && [[ "$LOGO_URL" =~ ^https?:// ]]; then
          echo "Downloading logo from: $LOGO_URL"
          curl -L -o "assets/brands/$BRAND_ID/logo.png" "$LOGO_URL" || touch "assets/brands/$BRAND_ID/logo.png"
        else
          touch "assets/brands/$BRAND_ID/logo.png"
        fi
        
        # Download splash background if URL is provided
        if [ ! -z "$SPLASH_URL" ] && [[ "$SPLASH_URL" =~ ^https?:// ]]; then
          echo "Downloading splash background from: $SPLASH_URL"
          curl -L -o "assets/brands/$BRAND_ID/splash_bg.png" "$SPLASH_URL" || touch "assets/brands/$BRAND_ID/splash_bg.png"
        else
          touch "assets/brands/$BRAND_ID/splash_bg.png"
        fi
        
        UPDATED_CONFIG=$(echo "$CONFIG" | jq --arg brand_id "$BRAND_ID" '
          .assets.logo = "assets/brands/\($brand_id)/" + (.assets.logo | split("/") | last) |
          .assets.splash_background = "assets/brands/\($brand_id)/splash_bg.png" |
          .assets.app_icon = "assets/brands/\($brand_id)/logo.png"
        ')
        
        echo "$UPDATED_CONFIG" | jq '.' > "assets/brands/$BRAND_ID/config.json"
        
        # Also copy to active_brand.json so the app can find it
        echo "$UPDATED_CONFIG" | jq '.' > "assets/config/active_brand.json"
        
        # Temporarily update pubspec.yaml
        cp pubspec.yaml pubspec.yaml.backup
        if ! grep -q "assets/brands/$BRAND_ID/" pubspec.yaml; then
          sed -i "/- assets\/brands\/active\//a\\    - assets/brands/$BRAND_ID/" pubspec.yaml
        fi
        
        echo "✅ Recreated temporary brand files for deployment"

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.2'
        channel: 'stable'

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
        working-directory: fastlane

    - name: Install dependencies
      run: |
        flutter pub get
        dart run build_runner build --delete-conflicting-outputs

    - name: Setup Android signing
      env:
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      run: |
        echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/keystore.jks
        cat > android/key.properties << EOF
        storePassword=$ANDROID_KEYSTORE_PASSWORD
        keyPassword=$ANDROID_KEY_PASSWORD
        keyAlias=$ANDROID_KEY_ALIAS
        storeFile=keystore.jks
        EOF

    - name: Deploy Android - ${{ needs.create-brand.outputs.brand_id }}
      env:
        GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
      run: |
        echo "$GOOGLE_PLAY_SERVICE_ACCOUNT_JSON" > fastlane/service_account.json
        
        # Debug: Show what brand files exist
        echo "Brand files created:"
        ls -la assets/brands/${{ needs.create-brand.outputs.brand_id }}/
        echo "Brand config content:"
        cat assets/brands/${{ needs.create-brand.outputs.brand_id }}/config.json
        
        cd fastlane
        bundle exec fastlane android deploy_brand brand_id:${{ needs.create-brand.outputs.brand_id }}

    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: android-${{ needs.create-brand.outputs.brand_id }}-${{ github.event.inputs.build_mode }}
        path: |
          build/app/outputs/flutter-apk/*.apk
          build/app/outputs/bundle/release/*.aab
        retention-days: 30

    - name: Cleanup temporary files
      if: always()
      run: |
        BRAND_ID="${{ needs.create-brand.outputs.brand_id }}"
        
        # Remove temporary brand directory
        rm -rf "assets/brands/$BRAND_ID"
        
        # Restore original pubspec.yaml if backup exists
        if [ -f "pubspec.yaml.backup" ]; then
          mv pubspec.yaml.backup pubspec.yaml
          echo "✅ Restored original pubspec.yaml"
        fi
        
        echo "✅ Cleaned up temporary brand files"

  summary:
    needs: [create-brand, deploy-android]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Deployment Summary
      run: |
        echo "🎉 Brand Creation and Deployment Complete!"
        echo "=========================================="
        echo "Brand ID: ${{ needs.create-brand.outputs.brand_id }}"
        echo "Platform: ${{ github.event.inputs.platform }}"
        echo "Build Mode: ${{ github.event.inputs.build_mode }}"
        echo ""
        echo "Deployment Status:"
        echo "- Android: ${{ needs.deploy-android.result || 'Skipped' }}"
        echo ""
        echo "Temporary brand files created and cleaned up ✅"
        echo "Build artifacts uploaded ✅"
        echo "No permanent changes made to repository ✅"
