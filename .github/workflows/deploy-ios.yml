name: Deploy iOS Apps

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'lib/**'
      - 'assets/**'
      - 'ios/**'
      - 'pubspec.yaml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      brand_id:
        description: 'Brand to deploy (default, brand_a, brand_b, or all)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - default
          - brand_a
          - brand_b
      build_mode:
        description: 'Build mode'
        required: true
        default: 'release'
        type: choice
        options:
          - debug
          - release

jobs:
  deploy-ios:
    runs-on: macos-latest
    strategy:
      matrix:
        brand_id: ${{ github.event.inputs.brand_id == 'all' && fromJson('["default", "brand_a", "brand_b"]') || fromJson(format('["{0}"]', github.event.inputs.brand_id || 'default')) }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
        working-directory: fastlane

    - name: Install dependencies
      run: |
        flutter pub get
        dart run build_runner build --delete-conflicting-outputs

    - name: Setup iOS signing
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Import certificate
        echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        
        # Install provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

    - name: Deploy iOS - ${{ matrix.brand_id }}
      env:
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
        FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      run: |
        cd fastlane
        bundle exec fastlane ios build_and_deploy brand_id:${{ matrix.brand_id }} build_mode:${{ github.event.inputs.build_mode || 'release' }}

    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-build-${{ matrix.brand_id }}
        path: |
          build/ios/iphoneos/*.app
          build/ios/iphoneos/*.ipa
        retention-days: 30

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ iOS deployment successful for brand: ${{ matrix.brand_id }}"
        else
          echo "❌ iOS deployment failed for brand: ${{ matrix.brand_id }}"
        fi
